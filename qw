warning: in the working copy of 'src/main.py', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/migrations/env.py b/migrations/env.py[m
[1mindex 1146100..748394f 100644[m
[1m--- a/migrations/env.py[m
[1m+++ b/migrations/env.py[m
[36m@@ -29,6 +29,7 @@[m [mfrom src.api.job_offers.models import JobOffer, JobApplication, JobAttachment, J[m
 from src.api.payments.models import Payment, CinetPayPayment[m
 from src.api.system.models import OrganizationCenter[m
 from src.api.training.models import StudentApplication, Training, TrainingSession, TrainingSessionParticipant ,Specialty[m
[32m+[m[32mfrom src.api.cabinet.models import CabinetApplication, ApplicationFee, CabinetRecruitmentCampaign[m
 [m
 [m
 target_metadata = SQLModel.metadata[m
[1mdiff --git a/src/api/payment/models.py b/src/api/payment/models.py[m
[1mdeleted file mode 100644[m
[1mindex 1063533..0000000[m
[1m--- a/src/api/payment/models.py[m
[1m+++ /dev/null[m
[36m@@ -1,37 +0,0 @@[m
[31m-from sqlalchemy import Column, Integer, String, Float, DateTime, Text, JSON, ForeignKey[m
[31m-from sqlalchemy.ext.declarative import declarative_base[m
[31m-from sqlalchemy.orm import relationship[m
[31m-from datetime import datetime, timezone[m
[31m-import uuid[m
[31m-[m
[31m-Base = declarative_base()[m
[31m-[m
[31m-class Payment(Base):[m
[31m-    __tablename__ = "payments"[m
[31m-[m
[31m-    id = Column(Integer, primary_key=True, index=True)[m
[31m-    payment_id = Column(String(50), unique=True, index=True, nullable=False)[m
[31m-    transaction_id = Column(String(100), unique=True, index=True, nullable=False)[m
[31m-    amount = Column(Float, nullable=False)[m
[31m-    currency = Column(String(10), nullable=False, default="XOF")[m
[31m-    status = Column(String(20), nullable=False, default="PENDING")[m
[31m-    payment_method = Column(String(20), nullable=False)[m
[31m-    user_id = Column(String(50), ForeignKey("users.id"), nullable=False)[m
[31m-    application_id = Column(Integer, ForeignKey("student_applications.id"), nullable=True)[m
[31m-    description = Column(Text, nullable=True)[m
[31m-    metadata = Column(JSON, nullable=True, default=dict)[m
[31m-    [m
[31m-    # Timestamps[m
[31m-    created_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))[m
[31m-    updated_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc), onupdate=lambda: datetime.now(timezone.utc))[m
[31m-    paid_at = Column(DateTime(timezone=True), nullable=True)[m
[31m-    failed_at = Column(DateTime(timezone=True), nullable=True)[m
[31m-    refunded_at = Column(DateTime(timezone=True), nullable=True)[m
[31m-    delete_at = Column(DateTime(timezone=True), nullable=True)[m
[31m-[m
[31m-    # Relationships[m
[31m-    user = relationship("User", back_populates="payments")[m
[31m-    application = relationship("StudentApplication", back_populates="payments")[m
[31m-[m
[31m-    def __repr__(self):[m
[31m-        return f"<Payment(id={self.id}, payment_id='{self.payment_id}', status='{self.status}')>"[m
[1mdiff --git a/src/api/payment/router.py b/src/api/payment/router.py[m
[1mdeleted file mode 100644[m
[1mindex 2cba286..0000000[m
[1m--- a/src/api/payment/router.py[m
[1m+++ /dev/null[m
[36m@@ -1,213 +0,0 @@[m
[31m-from fastapi import APIRouter, Depends, HTTPException, status[m
[31m-from typing import Annotated, List[m
[31m-from sqlalchemy.ext.asyncio import AsyncSession[m
[31m-[m
[31m-from ..user.dependencies import get_current_active_user, check_permissions[m
[31m-from ..user.models import User[m
[31m-from ..user.enums import PermissionEnum[m
[31m-from ..database import get_session_async[m
[31m-from ..base.schemas import BaseOutSuccess, BaseOutFail[m
[31m-from .schemas import ([m
[31m-    PaymentCreateInput,[m
[31m-    PaymentUpdateInput,[m
[31m-    PaymentFilter,[m
[31m-    PaymentStatusCheckInput,[m
[31m-    CinetpayWebhookInput,[m
[31m-    PaymentOut,[m
[31m-    PaymentListOut,[m
[31m-    PaymentStatusOut,[m
[31m-    CinetpayWebhookOut[m
[31m-)[m
[31m-from .services import PaymentService[m
[31m-[m
[31m-router = APIRouter()[m
[31m-[m
[31m-# Dependencies[m
[31m-async def get_payment_service(session: AsyncSession = Depends(get_session_async)) -> PaymentService:[m
[31m-    return PaymentService(session)[m
[31m-[m
[31m-# Payment Endpoints[m
[31m-@router.get("/payments", response_model=PaymentListOut, tags=["Payments"])[m
[31m-async def get_payments([m
[31m-    filters: PaymentFilter = Depends(),[m
[31m-    current_user: Annotated[User, Depends(get_current_active_user)],[m
[31m-    payment_service: PaymentService = Depends(get_payment_service),[m
[31m-):[m
[31m-    """Get all payments with filters"""[m
[31m-    payments, total_count = await payment_service.get_payments(filters)[m
[31m-    return {[m
[31m-        "success": True,[m
[31m-        "message": "Payments retrieved successfully",[m
[31m-        "data": payments,[m
[31m-        "page": filters.page,[m
[31m-        "number": len(payments),[m
[31m-        "total_number": total_count[m
[31m-    }[m
[31m-[m
[31m-@router.get("/payments/{payment_id}", response_model=PaymentOut, tags=["Payments"])[m
[31m-async def get_payment([m
[31m-    payment_id: int,[m
[31m-    current_user: Annotated[User, Depends(get_current_active_user)],[m
[31m-    payment_service: PaymentService = Depends(get_payment_service),[m
[31m-):[m
[31m-    """Get payment by ID"""[m
[31m-    payment = await payment_service.get_payment_by_id(payment_id)[m
[31m-    if not payment:[m
[31m-        raise HTTPException([m
[31m-            status_code=status.HTTP_404_NOT_FOUND,[m
[31m-            detail=BaseOutFail([m
[31m-                message="Payment not found",[m
[31m-                error_code="PAYMENT_NOT_FOUND",[m
[31m-            ).model_dump(),[m
[31m-        )[m
[31m-    [m
[31m-    return {[m
[31m-        "success": True,[m
[31m-        "message": "Payment retrieved successfully",[m
[31m-        "data": payment[m
[31m-    }[m
[31m-[m
[31m-@router.get("/payments-by-transaction/{transaction_id}", response_model=PaymentStatusOut, tags=["Payments"])[m
[31m-async def get_payment_by_transaction([m
[31m-    transaction_id: str,[m
[31m-    current_user: Annotated[User, Depends(get_current_active_user)],[m
[31m-    payment_service: PaymentService = Depends(get_payment_service),[m
[31m-):[m
[31m-    """Get payment by transaction ID"""[m
[31m-    payment = await payment_service.get_payment_by_transaction_id(transaction_id)[m
[31m-    if not payment:[m
[31m-        raise HTTPException([m
[31m-            status_code=status.HTTP_404_NOT_FOUND,[m
[31m-            detail=BaseOutFail([m
[31m-                message="Payment not found",[m
[31m-                error_code="PAYMENT_NOT_FOUND",[m
[31m-            ).model_dump(),[m
[31m-        )[m
[31m-    [m
[31m-    return {[m
[31m-        "success": True,[m
[31m-        "message": "Payment retrieved successfully",[m
[31m-        "data": {[m
[31m-            "transaction_id": payment.transaction_id,[m
[31m-            "status": payment.status,[m
[31m-            "amount": payment.amount,[m
[31m-            "currency": payment.currency,[m
[31m-            "payment_method": payment.payment_method,[m
[31m-            "created_at": payment.created_at,[m
[31m-            "updated_at": payment.updated_at[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-@router.get("/check-status/{transaction_id}", response_model=PaymentStatusOut, tags=["Payments"])[m
[31m-async def check_payment_status([m
[31m-    transaction_id: str,[m
[31m-    current_user: Annotated[User, Depends(get_current_active_user)],[m
[31m-    payment_service: PaymentService = Depends(get_payment_service),[m
[31m-):[m
[31m-    """Check payment status by transaction ID"""[m
[31m-    payment = await payment_service.get_payment_by_transaction_id(transaction_id)[m
[31m-    if not payment:[m
[31m-        raise HTTPException([m
[31m-            status_code=status.HTTP_404_NOT_FOUND,[m
[31m-            detail=BaseOutFail([m
[31m-                message="Payment not found",[m
[31m-                error_code="PAYMENT_NOT_FOUND",[m
[31m-            ).model_dump(),[m
[31m-        )[m
[31m-    [m
[31m-    return {[m
[31m-        "success": True,[m
[31m-        "message": "Payment status retrieved successfully",[m
[31m-        "data": {[m
[31m-            "transaction_id": payment.transaction_id,[m
[31m-            "status": payment.status,[m
[31m-            "amount": payment.amount,[m
[31m-            "currency": payment.currency,[m
[31m-            "payment_method": payment.payment_method,[m
[31m-            "created_at": payment.created_at,[m
[31m-            "updated_at": payment.updated_at[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-@router.post("/payments", response_model=PaymentOut, tags=["Payments"])[m
[31m-async def create_payment([m
[31m-    payment_data: PaymentCreateInput,[m
[31m-    current_user: Annotated[User, Depends(get_current_active_user)],[m
[31m-    payment_service: PaymentService = Depends(get_payment_service),[m
[31m-):[m
[31m-    """Create a new payment"""[m
[31m-    payment = await payment_service.create_payment(payment_data, current_user.id)[m
[31m-    return {[m
[31m-        "success": True,[m
[31m-        "message": "Payment created successfully",[m
[31m-        "data": payment[m
[31m-    }[m
[31m-[m
[31m-@router.put("/payments/{payment_id}", response_model=PaymentOut, tags=["Payments"])[m
[31m-async def update_payment([m
[31m-    payment_id: int,[m
[31m-    payment_data: PaymentUpdateInput,[m
[31m-    current_user: Annotated[User, Depends(get_current_active_user)],[m
[31m-    payment_service: PaymentService = Depends(get_payment_service),[m
[31m-):[m
[31m-    """Update payment"""[m
[31m-    payment = await payment_service.update_payment(payment_id, payment_data)[m
[31m-    if not payment:[m
[31m-        raise HTTPException([m
[31m-            status_code=status.HTTP_404_NOT_FOUND,[m
[31m-            detail=BaseOutFail([m
[31m-                message="Payment not found",[m
[31m-                error_code="PAYMENT_NOT_FOUND",[m
[31m-            ).model_dump(),[m
[31m-        )[m
[31m-    [m
[31m-    return {[m
[31m-        "success": True,[m
[31m-        "message": "Payment updated successfully",[m
[31m-        "data": payment[m
[31m-    }[m
[31m-[m
[31m-@router.delete("/payments/{payment_id}", response_model=PaymentOut, tags=["Payments"])[m
[31m-async def delete_payment([m
[31m-    payment_id: int,[m
[31m-    current_user: Annotated[User, Depends(get_current_active_user)],[m
[31m-    payment_service: PaymentService = Depends(get_payment_service),[m
[31m-):[m
[31m-    """Delete payment (soft delete)"""[m
[31m-    payment = await payment_service.delete_payment(payment_id)[m
[31m-    if not payment:[m
[31m-        raise HTTPException([m
[31m-            status_code=status.HTTP_404_NOT_FOUND,[m
[31m-            detail=BaseOutFail([m
[31m-                message="Payment not found",[m
[31m-                error_code="PAYMENT_NOT_FOUND",[m
[31m-            ).model_dump(),[m
[31m-        )[m
[31m-    [m
[31m-    return {[m
[31m-        "success": True,[m
[31m-        "message": "Payment deleted successfully",[m
[31m-        "data": payment[m
[31m-    }[m
[31m-[m
[31m-@router.post("/cinetpay/notify", response_model=CinetpayWebhookOut, tags=["Payments"])[m
[31m-async def cinetpay_webhook([m
[31m-    webhook_data: CinetpayWebhookInput,[m
[31m-    payment_service: PaymentService = Depends(get_payment_service),[m
[31m-):[m
[31m-    """CinetPay webhook handler"""[m
[31m-    try:[m
[31m-        result = await payment_service.handle_cinetpay_webhook(webhook_data)[m
[31m-        return {[m
[31m-            "success": True,[m
[31m-            "message": "Webhook processed successfully",[m
[31m-            "data": result[m
[31m-        }[m
[31m-    except Exception as e:[m
[31m-        raise HTTPException([m
[31m-            status_code=status.HTTP_400_BAD_REQUEST,[m
[31m-            detail=BaseOutFail([m
[31m-                message=f"Webhook processing failed: {str(e)}",[m
[31m-                error_code="WEBHOOK_PROCESSING_FAILED",[m
[31m-            ).model_dump(),[m
[31m-        )[m
[1mdiff --git a/src/api/payment/schemas.py b/src/api/payment/schemas.py[m
[1mdeleted file mode 100644[m
[1mindex 813f331..0000000[m
[1m--- a/src/api/payment/schemas.py[m
[1m+++ /dev/null[m
[36m@@ -1,103 +0,0 @@[m
[31m-from pydantic import BaseModel, Field[m
[31m-from typing import Optional, Dict, Any[m
[31m-from datetime import datetime[m
[31m-from enum import Enum[m
[31m-[m
[31m-# Enums[m
[31m-class PaymentStatusEnum(str, Enum):[m
[31m-    PENDING = "PENDING"[m
[31m-    SUCCESS = "SUCCESS"[m
[31m-    FAILED = "FAILED"[m
[31m-    CANCELLED = "CANCELLED"[m
[31m-    REFUNDED = "REFUNDED"[m
[31m-[m
[31m-class PaymentMethodEnum(str, Enum):[m
[31m-    CINETPAY = "CINETPAY"[m
[31m-    MOBILE_MONEY = "MOBILE_MONEY"[m
[31m-    BANK_CARD = "BANK_CARD"[m
[31m-[m
[31m-# Input Schemas[m
[31m-class PaymentCreateInput(BaseModel):[m
[31m-    amount: float = Field(..., gt=0, description="Payment amount")[m
[31m-    currency: str = Field(..., description="Payment currency")[m
[31m-    payment_method: PaymentMethodEnum = Field(..., description="Payment method")[m
[31m-    application_id: Optional[int] = Field(None, description="Associated application ID")[m
[31m-    description: Optional[str] = Field(None, description="Payment description")[m
[31m-    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict, description="Additional metadata")[m
[31m-[m
[31m-class PaymentUpdateInput(BaseModel):[m
[31m-    status: Optional[PaymentStatusEnum] = Field(None, description="Payment status")[m
[31m-    metadata: Optional[Dict[str, Any]] = Field(None, description="Additional metadata")[m
[31m-[m
[31m-class PaymentFilter(BaseModel):[m
[31m-    page: int = Field(1, ge=1, description="Page number")[m
[31m-    page_size: int = Field(20, ge=1, le=100, description="Page size")[m
[31m-    status: Optional[PaymentStatusEnum] = Field(None, description="Filter by status")[m
[31m-    payment_method: Optional[PaymentMethodEnum] = Field(None, description="Filter by payment method")[m
[31m-    user_id: Optional[str] = Field(None, description="Filter by user ID")[m
[31m-    application_id: Optional[int] = Field(None, description="Filter by application ID")[m
[31m-    date_from: Optional[datetime] = Field(None, description="Filter from date")[m
[31m-    date_to: Optional[datetime] = Field(None, description="Filter to date")[m
[31m-    order_by: Optional[str] = Field("created_at", description="Order by field")[m
[31m-    asc: Optional[str] = Field("desc", description="Sort order")[m
[31m-[m
[31m-class PaymentStatusCheckInput(BaseModel):[m
[31m-    transaction_id: str = Field(..., description="Transaction ID to check")[m
[31m-[m
[31m-class CinetpayWebhookInput(BaseModel):[m
[31m-    cpm_trans_id: str = Field(..., description="Transaction ID")[m
[31m-    cpm_trans_date: str = Field(..., description="Transaction date")[m
[31m-    cpm_amount: float = Field(..., description="Transaction amount")[m
[31m-    cpm_currency: str = Field(..., description="Transaction currency")[m
[31m-    cpm_payid: str = Field(..., description="Payment ID")[m
[31m-    cpm_payment_date: str = Field(..., description="Payment date")[m
[31m-    cpm_payment_time: str = Field(..., description="Payment time")[m
[31m-    cpm_error_message: str = Field("", description="Error message")[m
[31m-    cpm_phone_prefixe: str = Field("", description="Phone prefix")[m
[31m-    cpm_phone_number: str = Field("", description="Phone number")[m
[31m-    cpm_ipn_ack: str = Field("YES", description="IPN acknowledgment")[m
[31m-    cpm_result: str = Field(..., description="Payment result")[m
[31m-    cpm_trans_status: str = Field(..., description="Transaction status")[m
[31m-    cpm_designation: str = Field("", description="Payment designation")[m
[31m-    cpm_custom: str = Field("", description="Custom data")[m
[31m-    cpm_signature: str = Field(..., description="Payment signature")[m
[31m-[m
[31m-# Output Schemas[m
[31m-class PaymentOut(BaseModel):[m
[31m-    id: int[m
[31m-    payment_id: str[m
[31m-    transaction_id: str[m
[31m-    amount: float[m
[31m-    currency: str[m
[31m-    status: PaymentStatusEnum[m
[31m-    payment_method: PaymentMethodEnum[m
[31m-    user_id: str[m
[31m-    application_id: Optional[int][m
[31m-    description: Optional[str][m
[31m-    metadata: Optional[Dict[str, Any]][m
[31m-    created_at: datetime[m
[31m-    updated_at: datetime[m
[31m-    paid_at: Optional[datetime][m
[31m-    failed_at: Optional[datetime][m
[31m-    refunded_at: Optional[datetime][m
[31m-[m
[31m-    class Config:[m
[31m-        from_attributes = True[m
[31m-[m
[31m-class PaymentListOut(BaseModel):[m
[31m-    success: bool[m
[31m-    message: str[m
[31m-    data: list[PaymentOut][m
[31m-    page: int[m
[31m-    number: int[m
[31m-    total_number: int[m
[31m-[m
[31m-class PaymentStatusOut(BaseModel):[m
[31m-    success: bool[m
[31m-    message: str[m
[31m-    data: dict[m
[31m-[m
[31m-class CinetpayWebhookOut(BaseModel):[m
[31m-    success: bool[m
[31m-    message: str[m
[31m-    data: dict[m
[1mdiff --git a/src/api/payment/services.py b/src/api/payment/services.py[m
[1mdeleted file mode 100644[m
[1mindex 1add45c..0000000[m
[1m--- a/src/api/payment/services.py[m
[1m+++ /dev/null[m
[36m@@ -1,218 +0,0 @@[m
[31m-from sqlalchemy.ext.asyncio import AsyncSession[m
[31m-from sqlalchemy import select, func, and_, or_[m
[31m-from sqlalchemy.orm import selectinload[m
[31m-from typing import List, Tuple, Optional[m
[31m-from datetime import datetime, timezone[m
[31m-import uuid[m
[31m-import json[m
[31m-[m
[31m-from ..payment.schemas import ([m
[31m-    PaymentCreateInput,[m
[31m-    PaymentUpdateInput,[m
[31m-    PaymentFilter,[m
[31m-    CinetpayWebhookInput,[m
[31m-    PaymentStatusEnum,[m
[31m-    PaymentMethodEnum[m
[31m-)[m
[31m-from ..payment.models import Payment[m
[31m-from ..user.models import User[m
[31m-[m
[31m-class PaymentService:[m
[31m-    def __init__(self, session: AsyncSession):[m
[31m-        self.session = session[m
[31m-[m
[31m-    async def get_payments(self, filters: PaymentFilter) -> Tuple[List[Payment], int]:[m
[31m-        """Get payments with filters and pagination"""[m
[31m-        # Base query[m
[31m-        statement = select(Payment).where(Payment.delete_at.is_(None))[m
[31m-        count_query = select(func.count(Payment.id)).where(Payment.delete_at.is_(None))[m
[31m-[m
[31m-        # Apply filters[m
[31m-        if filters.status:[m
[31m-            statement = statement.where(Payment.status == filters.status)[m
[31m-            count_query = count_query.where(Payment.status == filters.status)[m
[31m-[m
[31m-        if filters.payment_method:[m
[31m-            statement = statement.where(Payment.payment_method == filters.payment_method)[m
[31m-[m
[31m-        if filters.user_id:[m
[31m-            statement = statement.where(Payment.user_id == filters.user_id)[m
[31m-            count_query = count_query.where(Payment.user_id == filters.user_id)[m
[31m-[m
[31m-        if filters.application_id:[m
[31m-            statement = statement.where(Payment.application_id == filters.application_id)[m
[31m-            count_query = count_query.where(Payment.application_id == filters.application_id)[m
[31m-[m
[31m-        if filters.date_from:[m
[31m-            statement = statement.where(Payment.created_at >= filters.date_from)[m
[31m-            count_query = count_query.where(Payment.created_at >= filters.date_from)[m
[31m-[m
[31m-        if filters.date_to:[m
[31m-            statement = statement.where(Payment.created_at <= filters.date_to)[m
[31m-            count_query = count_query.where(Payment.created_at <= filters.date_to)[m
[31m-[m
[31m-        # Apply ordering[m
[31m-        if filters.order_by == "created_at":[m
[31m-            statement = statement.order_by([m
[31m-                Payment.created_at if filters.asc == "asc" else Payment.created_at.desc()[m
[31m-            )[m
[31m-        elif filters.order_by == "amount":[m
[31m-            statement = statement.order_by([m
[31m-                Payment.amount if filters.asc == "asc" else Payment.amount.desc()[m
[31m-            )[m
[31m-        elif filters.order_by == "status":[m
[31m-            statement = statement.order_by([m
[31m-                Payment.status if filters.asc == "asc" else Payment.status.desc()[m
[31m-            )[m
[31m-[m
[31m-        # Get total count[m
[31m-        total_count = (await self.session.execute(count_query)).scalar_one()[m
[31m-[m
[31m-        # Apply pagination[m
[31m-        statement = statement.offset((filters.page - 1) * filters.page_size).limit(filters.page_size)[m
[31m-        result = await self.session.execute(statement)[m
[31m-        return result.scalars().all(), total_count[m
[31m-[m
[31m-    async def get_payment_by_id(self, payment_id: int) -> Optional[Payment]:[m
[31m-        """Get payment by ID"""[m
[31m-        statement = select(Payment).where([m
[31m-            Payment.id == payment_id,[m
[31m-            Payment.delete_at.is_(None)[m
[31m-        )[m
[31m-        result = await self.session.execute(statement)[m
[31m-        return result.scalar_one_or_none()[m
[31m-[m
[31m-    async def get_payment_by_transaction_id(self, transaction_id: str) -> Optional[Payment]:[m
[31m-        """Get payment by transaction ID"""[m
[31m-        statement = select(Payment).where([m
[31m-            Payment.transaction_id == transaction_id,[m
[31m-            Payment.delete_at.is_(None)[m
[31m-        )[m
[31m-        result = await self.session.execute(statement)[m
[31m-        return result.scalar_one_or_none()[m
[31m-[m
[31m-    async def create_payment(self, payment_data: PaymentCreateInput, user_id: str) -> Payment:[m
[31m-        """Create a new payment"""[m
[31m-        # Generate unique payment and transaction IDs[m
[31m-        payment_id = f"PAY-{uuid.uuid4().hex[:8].upper()}"[m
[31m-        transaction_id = f"TXN-{uuid.uuid4().hex[:12].upper()}"[m
[31m-        [m
[31m-        payment = Payment([m
[31m-            payment_id=payment_id,[m
[31m-            transaction_id=transaction_id,[m
[31m-            amount=payment_data.amount,[m
[31m-            currency=payment_data.currency,[m
[31m-            status=PaymentStatusEnum.PENDING,[m
[31m-            payment_method=payment_data.payment_method,[m
[31m-            user_id=user_id,[m
[31m-            application_id=payment_data.application_id,[m
[31m-            description=payment_data.description,[m
[31m-            metadata=payment_data.metadata or {},[m
[31m-            created_at=datetime.now(timezone.utc),[m
[31m-            updated_at=datetime.now(timezone.utc)[m
[31m-        [m
[31m-        self.session.add(payment)[m
[31m-        await self.session.commit()[m
[31m-        await self.session.refresh(payment)[m
[31m-        return payment[m
[31m-[m
[31m-    async def update_payment(self, payment_id: int, payment_data: PaymentUpdateInput) -> Optional[Payment]:[m
[31m-        """Update payment"""[m
[31m-        payment = await self.get_payment_by_id(payment_id)[m
[31m-        if not payment:[m
[31m-            return None[m
[31m-[m
[31m-        # Update fields[m
[31m-        if payment_data.status:[m
[31m-            payment.status = payment_data.status[m
[31m-            # Set specific timestamps based on status[m
[31m-            if payment_data.status == PaymentStatusEnum.SUCCESS:[m
[31m-                payment.paid_at = datetime.now(timezone.utc)[m
[31m-            elif payment_data.status == PaymentStatusEnum.FAILED:[m
[31m-                payment.failed_at = datetime.now(timezone.utc)[m
[31m-            elif payment_data.status == PaymentStatusEnum.REFUNDED:[m
[31m-                payment.refunded_at = datetime.now(timezone.utc)[m
[31m-[m
[31m-        if payment_data.metadata:[m
[31m-            payment.metadata = payment_data.metadata[m
[31m-[m
[31m-        payment.updated_at = datetime.now(timezone.utc)[m
[31m-        [m
[31m-        self.session.add(payment)[m
[31m-        await self.session.commit()[m
[31m-        await self.session.refresh(payment)[m
[31m-        return payment[m
[31m-[m
[31m-    async def delete_payment(self, payment_id: int) -> Optional[Payment]:[m
[31m-        """Soft delete payment"""[m
[31m-        payment = await self.get_payment_by_id(payment_id)[m
[31m-        if not payment:[m
[31m-            return None[m
[31m-[m
[31m-        payment.delete_at = datetime.now(timezone.utc)[m
[31m-        payment.updated_at = datetime.now(timezone.utc)[m
[31m-        [m
[31m-        self.session.add(payment)[m
[31m-        await self.session.commit()[m
[31m-        await self.session.refresh(payment)[m
[31m-        return payment[m
[31m-[m
[31m-    async def handle_cinetpay_webhook(self, webhook_data: CinetpayWebhookInput) -> dict:[m
[31m-        """Handle CinetPay webhook notification"""[m
[31m-        try:[m
[31m-            # Find payment by transaction ID[m
[31m-            payment = await self.get_payment_by_transaction_id(webhook_data.cpm_trans_id)[m
[31m-            [m
[31m-            if not payment:[m
[31m-                return {[m
[31m-                    "transaction_id": webhook_data.cpm_trans_id,[m
[31m-                    "status": PaymentStatusEnum.FAILED,[m
[31m-                    "processed": False[m
[31m-                }[m
[31m-[m
[31m-            # Update payment status based on CinetPay response[m
[31m-            if webhook_data.cpm_result == "00" and webhook_data.cpm_trans_status == "ACCEPTED":[m
[31m-                payment.status = PaymentStatusEnum.SUCCESS[m
[31m-                payment.paid_at = datetime.now(timezone.utc)[m
[31m-            elif webhook_data.cpm_result == "01":[m
[31m-                payment.status = PaymentStatusEnum.FAILED[m
[31m-                payment.failed_at = datetime.now(timezone.utc)[m
[31m-            elif webhook_data.cpm_result == "02":[m
[31m-                payment.status = PaymentStatusEnum.CANCELLED[m
[31m-[m
[31m-            # Update metadata with webhook data[m
[31m-            payment.metadata = {[m
[31m-                **payment.metadata,[m
[31m-                "cinetpay_webhook": {[m
[31m-                    "cpm_payid": webhook_data.cpm_payid,[m
[31m-                    "cpm_payment_date": webhook_data.cpm_payment_date,[m
[31m-                    "cpm_payment_time": webhook_data.cpm_payment_time,[m
[31m-                    "cpm_error_message": webhook_data.cpm_error_message,[m
[31m-                    "cpm_phone_number": webhook_data.cpm_phone_number,[m
[31m-                    "cpm_designation": webhook_data.cpm_designation,[m
[31m-                    "cpm_custom": webhook_data.cpm_custom,[m
[31m-                    "cpm_signature": webhook_data.cpm_signature,[m
[31m-                    "processed_at": datetime.now(timezone.utc).isoformat()[m
[31m-                }[m
[31m-            }[m
[31m-[m
[31m-            payment.updated_at = datetime.now(timezone.utc)[m
[31m-            [m
[31m-            self.session.add(payment)[m
[31m-            await self.session.commit()[m
[31m-            await self.session.refresh(payment)[m
[31m-[m
[31m-            return {[m
[31m-                "transaction_id": payment.transaction_id,[m
[31m-                "status": payment.status,[m
[31m-                "processed": True[m
[31m-            }[m
[31m-[m
[31m-        except Exception as e:[m
[31m-            # Log error and return failure[m
[31m-            print(f"Error processing CinetPay webhook: {str(e)}")[m
[31m-            return {[m
[31m-                "transaction_id": webhook_data.cpm_trans_id,[m
[31m-                "status": PaymentStatusEnum.FAILED,[m
[31m-                "processed": False[m
[31m-            }[m
[1mdiff --git a/src/api/user/models.py b/src/api/user/models.py[m
[1mindex 5f181c9..d090065 100644[m
[1m--- a/src/api/user/models.py[m
[1m+++ b/src/api/user/models.py[m
[36m@@ -1,12 +1,10 @@[m
[31m-from sqlmodel import  Field,Relationship,SQLModel[m
[31m-from datetime import date[m
[31m-from src.helper.model import CustomBaseUUIDModel,CustomBaseModel[m
[31m-from typing import List[m
[32m+[m[32mfrom src.api.cabinet.models import CabinetApplication[m
[32m+[m[32mfrom sqlmodel import Field, Relationship, SQLModel[m
[32m+[m[32mfrom datetime import date, datetime, timezone[m
[32m+[m[32mfrom src.helper.model import CustomBaseUUIDModel, CustomBaseModel[m
[32m+[m[32mfrom typing import List, Optional[m
 from enum import Enum[m
[31m-from  datetime import datetime,timezone[m
[31m-from sqlalchemy import  TIMESTAMP, event[m
[31m-[m
[31m-[m
[32m+[m[32mfrom sqlalchemy import TIMESTAMP, event[m
 [m
 class Status(str, Enum):[m
     draft = "Draft"[m
[36m@@ -34,15 +32,12 @@[m [mclass CivilityEnum(str, Enum):[m
     MMME = "Mme"[m
     MLLE = "Mlle"[m
     [m
[31m-[m
 class PermissionEnum(str, Enum):[m
[31m-[m
     CAN_VIEW_USER = "can_view_user"[m
     CAN_CREATE_USER = "can_create_user"[m
     CAN_UPDATE_USER = "can_update_user"[m
     CAN_DELETE_USER = "can_delete_user"[m
     [m
[31m-[m
     CAN_VIEW_ROLE = "can_view_role"[m
     CAN_CREATE_ROLE = "can_create_role"[m
     CAN_UPDATE_ROLE = "can_update_role"[m
[36m@@ -99,16 +94,6 @@[m [mclass PermissionEnum(str, Enum):[m
     CAN_DELETE_ORGANIZATION_CENTER = "can_delete_organization_center"[m
     [m
     CAN_VIEW_PAYMENT = "can_view_payment"[m
[31m-    [m
[31m-    [m
[31m-    [m
[31m-"""[m
[31m-    CAN_VIEW_PERMISSION = "can_view_permission"[m
[31m-    CAN_CREATE_PERMISSION = "can_create_permission"[m
[31m-    CAN_UPDATE_PERMISSION = "can_update_permission"[m
[31m-    CAN_DELETE_PERMISSION = "can_delete_permission"[m
[31m-    [m
[31m-"""[m
 [m
 class NotificationChannel(str, Enum):[m
     EMAIL = "email"[m
[36m@@ -124,109 +109,90 @@[m [mclass PermissionUserTypeEnum(str, Enum):[m
     ROLE = "role"[m
     PERMISSION = "permission"[m
 [m
[31m-[m
[31m-[m
[31m-class Role(CustomBaseModel,table=True):[m
[32m+[m[32mclass Role(CustomBaseModel, table=True):[m
     __tablename__ = "role"[m
     [m
[31m-    name : str = Field(default=RoleEnum.MANAGER)[m
[31m-    description : str = Field(default="")[m
[32m+[m[32m    name: str = Field(default=RoleEnum.MANAGER)[m
[32m+[m[32m    description: str = Field(default="")[m
 [m
[31m-class UserRole(SQLModel,table=True):[m
[32m+[m[32mclass UserRole(SQLModel, table=True):[m
     __tablename__ = "user_role"[m
[32m+[m[41m    [m
[32m+[m[32m    user_id: str | None = Field(default=None, foreign_key="users.id", primary_key=True)[m
[32m+[m[32m    role_id: int | None = Field(default=None, foreign_key="role.id", primary_key=True)[m
 [m
[31m-    user_id : str | None = Field(default=None, foreign_key="users.id",primary_key=True)[m
[31m-    role_id : int | None = Field(default=None, foreign_key="role.id" ,primary_key=True)[m
[31m-[m
[31m-[m
[31m-class UserPermission(CustomBaseModel,table=True):[m
[32m+[m[32mclass UserPermission(CustomBaseModel, table=True):[m
     __tablename__ = "user_permission"[m
[32m+[m[41m    [m
[32m+[m[32m    user_id: str | None = Field(default=None, foreign_key="users.id")[m
[32m+[m[32m    role_id: int | None = Field(default=None, nullable=True, foreign_key="role.id")[m
[32m+[m[32m    permission: str = Field(nullable=False)[m
 [m
[31m-    user_id : str | None = Field(default=None,foreign_key="users.id")[m
[31m-    role_id : int | None = Field(default=None,nullable=True,foreign_key="role.id" )[m
[31m-    permission : str = Field(nullable=False)[m
[31m-[m
[31m-class SchoolCurriculum(CustomBaseModel,table=True):[m
[32m+[m[32mclass SchoolCurriculum(CustomBaseModel, table=True):[m
     __tablename__ = "school_curriculum"[m
     [m
[31m-    user_id : str  = Field(foreign_key="users.id")[m
[31m-    qualification : str | None = Field(nullable=True)[m
[31m-    last_degree_obtained : str | None = Field(nullable=True)[m
[31m-    date_of_last_degree : date | None = Field(nullable=True)[m
[32m+[m[32m    user_id: str = Field(foreign_key="users.id")[m
[32m+[m[32m    qualification: str | None = Field(nullable=True)[m
[32m+[m[32m    last_degree_obtained: str | None = Field(nullable=True)[m
[32m+[m[32m    date_of_last_degree: date | None = Field(nullable=True)[m
 [m
[31m-class ProfessionStatus(CustomBaseModel,table=True):[m
[32m+[m[32mclass ProfessionStatus(CustomBaseModel, table=True):[m
     __tablename__ = "profession_status"[m
     [m
[31m-    user_id : str  = Field(foreign_key="users.id")[m
[31m-    professional_status : str = Field(nullable=False)[m
[31m-    professional_experience_in_months : int = Field(nullable=False,default=0)[m
[31m-    socio_professional_category : str | None = Field(nullable=True)[m
[32m+[m[32m    user_id: str = Field(foreign_key="users.id")[m
[32m+[m[32m    professional_status: str = Field(nullable=False)[m
[32m+[m[32m    professional_experience_in_months: int = Field(nullable=False, default=0)[m
[32m+[m[32m    socio_professional_category: str | None = Field(nullable=True)[m
[32m+[m[32m    job_position: str | None = Field(nullable=True)[m
[32m+[m[32m    employer: str | None = Field(nullable=True)[m
 [m
[31m-    job_position : str | None = Field(nullable=True)[m
[31m-    employer : str | None = Field(nullable=True)[m
[31m-    [m
 class Address(CustomBaseModel, table=True):[m
     __tablename__ = "addresses"[m
[31m-[m
[31m-[m
[32m+[m[41m    [m
     user_id: str = Field(foreign_key="users.id", nullable=False)[m
[31m-    address_type: str = Field(max_length=15, nullable=False,default=AddressTypeEnum.PRIMARY)  # e.g., 'primary', 'billing'[m
[31m-[m
[32m+[m[32m    address_type: str = Field(max_length=15, nullable=False, default=AddressTypeEnum.PRIMARY)[m
     country_code: str | None = Field(max_length=4, nullable=True)[m
     city: str | None = Field(max_length=120, nullable=True)[m
     street: str | None = Field(max_length=255, nullable=True)[m
     postal_code: str | None = Field(max_length=50, nullable=True)[m
     state: str | None = Field(max_length=120, nullable=True)[m
[31m-[m
[31m-[m
[32m+[m[41m    [m
     user: "User" = Relationship(back_populates="addresses")[m
 [m
[31m-class User(CustomBaseUUIDModel,table=True):[m
[32m+[m[32mclass User(CustomBaseUUIDModel, table=True):[m
     __tablename__ = "users"[m
     [m
     first_name: str = Field(nullable=False)[m
     last_name: str = Field(nullable=False)[m
     birth_date: date | None = Field(nullable=True)[m
[31m-    civility : str | None = Field(nullable=True)[m
[31m-    country_code : str | None = Field(nullable=True,max_length=4)[m
[31m-    mobile_number : str | None = Field(nullable=True,index=True)[m
[31m-    fix_number: str | None = Field(nullable=True,index=True)[m
[31m-    email: str | None = Field(nullable=True,index=True,unique=True)[m
[32m+[m[32m    civility: str | None = Field(nullable=True)[m
[32m+[m[32m    country_code: str | None = Field(nullable=True, max_length=4)[m
[32m+[m[32m    mobile_number: str | None = Field(nullable=True, index=True)[m
[32m+[m[32m    fix_number: str | None = Field(nullable=True, index=True)[m
[32m+[m[32m    email: str | None = Field(nullable=True, index=True, unique=True)[m
     password: str = Field(nullable=False)[m
[31m-    picture : str | None = Field(nullable=True)[m
[31m-    status : str = Field(default=UserStatusEnum.ACTIVE)[m
[31m-    lang : str = Field(default="en")[m
[31m-    web_token : str | None = Field(nullable=True)[m
[31m-    last_login : datetime | None = Field(default=None, nullable=True, sa_type=TIMESTAMP(timezone=True)) #datetime = Field(sa_type=TIMESTAMP(timezone=True), nullable=True)[m
[31m-    user_type :str = Field(default=UserTypeEnum.STUDENT)[m
[31m-    two_factor_enabled : bool = Field(default=False)[m
[31m-    moodle_user_id : int | None = Field(default=None)[m
[31m-    [m
[31m-    [m
[31m-    professions_status : ProfessionStatus | None  = Relationship()[m
[31m-    addresses : List[Address] = Relationship()[m
[31m-    school_curriculum : SchoolCurriculum | None  = Relationship()[m
[31m-    [m
[31m-    roles : List["Role"] = Relationship(link_model=UserRole) [m
[31m-    [m
[32m+[m[32m    picture: str | None = Field(nullable=True)[m
[32m+[m[32m    status: str = Field(default=UserStatusEnum.ACTIVE)[m
[32m+[m[32m    lang: str = Field(default="en")[m
[32m+[m[32m    web_token: str | None = Field(nullable=True)[m
[32m+[m[32m    last_login: datetime | None = Field(default=None, nullable=True, sa_type=TIMESTAMP(timezone=True))[m
[32m+[m[32m    user_type: str = Field(default=UserTypeEnum.STUDENT)[m
[32m+[m[32m    two_factor_enabled: bool = Field(default=False)[m
[32m+[m[32m    moodle_user_id: int | None = Field(default=None)[m
[32m+[m[41m    [m
[32m+[m[32m    professions_status: Optional[ProfessionStatus] = Relationship()[m
[32m+[m[32m    addresses: List[Address] = Relationship()[m
[32m+[m[32m    school_curriculum: Optional[SchoolCurriculum] = Relationship()[m
[32m+[m[32m    roles: List["Role"] = Relationship(link_model=UserRole)[m
[32m+[m[32m    cabinet_application: Optional["CabinetApplication"] = Relationship(back_populates="user")[m
[32m+[m
     def full_name(self) -> str: [m
         return f"{self.first_name.capitalize()} {self.last_name.capitalize()}"[m
 [m
[31m-[m
[31m-[m
[31m-[m
 def update_updated_at(mapper, connection, target):[m
     target.updated_at = datetime.now(timezone.utc)[m
 [m
[31m-[m
[31m-#Add the event listener for before update[m
 event.listen(User, 'before_update', update_updated_at)[m
 event.listen(Role, 'before_update', update_updated_at)[m
 event.listen(UserRole, 'before_update', update_updated_at)[m
[31m-event.listen(UserPermission, 'before_update', update_updated_at)[m
[31m-[m
[31m-#event.listen(mapper, 'before_delete', delete_delete_at)[m
[31m-[m
[31m-#2131 , 22109 , 946    $2y$10$lY3advjnx.iUKjjhu4ir0uYOoTbspxZVr/TIDYPnhxXSOWdsBBPLC[m
[31m-[m
[31m-#2136 $2y$10$1tOu7JhO61.LZvBRBDT.nObRhB3At25TJee4O8BXVzG/FamMcaPQi[m
\ No newline at end of file[m
[32m+[m[32mevent.listen(UserPermission, 'before_update', update_updated_at)[m
\ No newline at end of file[m
[1mdiff --git a/src/helper/notifications.py b/src/helper/notifications.py[m
[1mindex 9033f51..520a099 100644[m
[1m--- a/src/helper/notifications.py[m
[1m+++ b/src/helper/notifications.py[m
[36m@@ -215,4 +215,41 @@[m [mclass JobApplicationOTPNotification(NotificationBase) :[m
                     "candidate_name":self.candidate_name[m
                 } [m
         } [m
[32m+[m
[32m+[m[32mclass CabinetCredentialsNotification(NotificationBase):[m
[32m+[m[32m    subject: str = "Identifiants de connexion - Cabinet LAFAOM"[m
[32m+[m[32m    email_template: str = "cabinet_credentials.html"[m
[32m+[m[32m    username: str = ""[m
[32m+[m[32m    temporary_password: str = ""[m
[32m+[m[32m    login_url: str = ""[m
[32m+[m[32m    company_name: str = ""[m
[32m+[m[41m    [m
[32m+[m[32m    def email_data(self) -> dict:[m
[32m+[m[32m        return {[m
[32m+[m[32m            "to_email": self.email,[m
[32m+[m[32m            "subject": self.subject,[m
[32m+[m[32m            "template_name": self.email_template,[m
[32m+[m[32m            "lang": self.lang,[m
[32m+[m[32m            "context": {[m
[32m+[m[32m                "username": self.username,[m
[32m+[m[32m                "temporary_password": self.temporary_password,[m
[32m+[m[32m                "login_url": self.login_url,[m
[32m+[m[32m                "company_name": self.company_name[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32mclass NotificationService:[m
[32m+[m[32m    def __init__(self):[m
[32m+[m[32m        pass[m
[32m+[m[41m    [m
[32m+[m[32m    async def send_cabinet_credentials_email(self, credentials):[m
[32m+[m[32m        """Envoyer les identifiants de connexion au cabinet"""[m
[32m+[m[32m        notification = CabinetCredentialsNotification([m
[32m+[m[32m            email=credentials.email,[m
[32m+[m[32m            username=credentials.username,[m
[32m+[m[32m            temporary_password=credentials.temporary_password,[m
[32m+[m[32m            login_url=credentials.login_url,[m
[32m+[m[32m            company_name=credentials.company_name if hasattr(credentials, 'company_name') else "Cabinet"[m
[32m+[m[32m        )[m
[32m+[m[32m        return notification.send_notification()[m
         [m
\ No newline at end of file[m
[1mdiff --git a/src/main.py b/src/main.py[m
[1mindex 8ec62c6..03541d6 100644[m
[1m--- a/src/main.py[m
[1m+++ b/src/main.py[m
[36m@@ -11,6 +11,7 @@[m [mfrom src.api.auth.router import router as auth_router[m
 from src.api.training.routers import router as training_router[m
 from src.api.system.router import router as system_router[m
 from src.api.system.dashboard import router as dashboard_router[m
[32m+[m[32mfrom src.api.cabinet.router import router as cabinet_router[m
 [m
 import firebase_admin[m
 from firebase_admin import credentials[m
[36m@@ -101,6 +102,7 @@[m [mapp.include_router(training_router, prefix=base_url )[m
 app.include_router(payments_router, prefix=base_url + "/payments", tags=["Payments"])[m
 app.include_router(system_router, prefix=base_url + "/system", tags=["System"])[m
 app.include_router(dashboard_router, prefix=base_url + "/dashboard", tags=["Dashboard"])[m
[32m+[m[32mapp.include_router(cabinet_router, prefix=base_url + "/cabinet-application")[m
 [m
 @app.exception_handler(RequestValidationError)[m
 async def validation_exception_handler(request: Request, exc: RequestValidationError):[m
